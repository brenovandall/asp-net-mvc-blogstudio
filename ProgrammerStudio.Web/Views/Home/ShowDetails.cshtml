@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> _signInManager
@inject UserManager<IdentityUser> _userManager


@model ProgrammerStudio.Web.Models.ViewModels.ShowDetailsViewModel
@{
}

<div class="container mx-auto mt-8 mb-8">
    <div class="max-w-4xl mx-auto bg-white p-8 rounded-md shadow-md mb-8">
        <!-- Título do Post -->
        <h1 class="text-3xl font-bold mb-4">@Model.Title</h1>
        <p class="text-xs text-gray-500 mb-4">@Model.PublishDate.ToShortDateString() - @Model.Author</p>
        <div class="text-xs text-gray-500 mb-4">
            <div class="flex">
                @if (_signInManager.IsSignedIn(User))
                {
                    <div class="mr-1">

                        <a id="like-btn">
                            <i class="bi bi-heart" style="cursor: pointer;"></i>
                        </a>
                    </div>
                }
                <div>
                    <span id="likes">@Model.Likes</span> likes
                </div>
            </div>
            
        </div>
        <!-- Hashtags/Tags -->
        <div class="mb-4">
            @foreach (var tags in Model.BlogTags)
            {
                <span class="inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2 mb-2">@tags.DisplayName</span>
            }
            <!-- Adicione mais tags conforme necessário -->
        </div>
        <!-- Thumbnail do Post -->
        <img src="@Model.ImageUrl" alt="Thumbnail do Post" class="mb-4 rounded-md w-full h-64 object-cover">
        <!-- Conteúdo do Post -->
        <div class="text-gray-700 leading-relaxed">
            <!-- Conteúdo Extensivo com Texto e Imagens -->
            <div>
                @Html.Raw(Model.Content)
                
            </div>
            @* <img src="caminho-da-imagem.jpg" alt="Descrição da Imagem" class="my-4 rounded-md w-full h-auto"> *@
            <!-- Adicione mais conteúdo conforme necessário -->
        </div>
        <!-- Descrição do Post -->
@*         <div class="mt-4 text-gray-600">
            <p>@Model.Description</p>
        </div> *@
    </div>
</div>


@section Scripts {

    <script>

        const likeBtn = document.querySelector("#like-btn"); // button for like (heart icon)
        const totalLikes = document.querySelector("#likes"); // count of likes
        
        // FUNCTION THAT GETS ALL THE LIKES OF SPECIFIC POST
        async function getTotalLikes() {
            // right here, user makes que requisition and the id of model is included at its fetch
            fetch('/api/Likes/@Model.Id/totallikes', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': '*/*'
                }
            }).then(data => data.json())
                .then(result => totalLikes.innerHTML = result // gets the result of requisition (count of likes) and fills the html element
                );
        }

        // FUNCTION THAT ADD A LIKE OF SPECIFIC POST
        async function addLike() {
            // right here, user makes que requisition to send the like
            fetch('/api/Likes/AddLikes', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': '*/*'
                },
                body: JSON.stringify({ // body contains the id if the blog and user id 
                    BlogId: '@Model.Id', 
                    UserId: '@_userManager.GetUserId(User)' 
                } )
            }).then(() => {
                // so when the uiser likes the post, the icon changes for a filled heart
                likeBtn.innerHTML = '<i class="bi bi-heart-fill"></i>';
                likeBtn.removeEventListener('click', addLike); // and removes the event on this, so once liked, he cant like it again
                getTotalLikes();
            })
        }

        likeBtn.addEventListener('click', addLike);

    </script>

}